diff --git a/node_modules/react-native-fast-image/android/build.gradle b/node_modules/react-native-fast-image/android/build.gradle
index 5b21cd5..3828742 100644
--- a/node_modules/react-native-fast-image/android/build.gradle
+++ b/node_modules/react-native-fast-image/android/build.gradle
@@ -63,6 +63,7 @@ dependencies {
     //noinspection GradleDynamicVersion
     implementation 'com.facebook.react:react-native:+'  // From node_modules
     implementation "com.github.bumptech.glide:glide:${glideVersion}"
-    implementation "com.github.bumptech.glide:okhttp3-integration:${glideVersion}"
+    // implementation "com.github.bumptech.glide:okhttp3-integration:${glideVersion}"
+    implementation "com.github.bumptech.glide:cronet-integration:${glideVersion}"
     annotationProcessor "com.github.bumptech.glide:compiler:${glideVersion}"
 }
diff --git a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule.java b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule.java
deleted file mode 100644
index e659a61..0000000
--- a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule.java
+++ /dev/null
@@ -1,176 +0,0 @@
-package com.dylanvann.fastimage;
-
-import android.content.Context;
-import androidx.annotation.NonNull;
-
-import com.bumptech.glide.Glide;
-import com.bumptech.glide.Registry;
-import com.bumptech.glide.annotation.GlideModule;
-import com.bumptech.glide.integration.okhttp3.OkHttpUrlLoader;
-import com.bumptech.glide.load.model.GlideUrl;
-import com.bumptech.glide.module.LibraryGlideModule;
-import com.facebook.react.modules.network.OkHttpClientProvider;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.WeakHashMap;
-
-import okhttp3.Interceptor;
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.ResponseBody;
-import okio.Buffer;
-import okio.BufferedSource;
-import okio.ForwardingSource;
-import okio.Okio;
-import okio.Source;
-
-@GlideModule
-public class FastImageOkHttpProgressGlideModule extends LibraryGlideModule {
-
-    private static DispatchingProgressListener progressListener = new DispatchingProgressListener();
-
-    @Override
-    public void registerComponents(
-            @NonNull Context context,
-            @NonNull Glide glide,
-            @NonNull Registry registry
-    ) {
-        OkHttpClient client = OkHttpClientProvider
-                .getOkHttpClient()
-                .newBuilder()
-                .addInterceptor(createInterceptor(progressListener))
-                .build();
-        OkHttpUrlLoader.Factory factory = new OkHttpUrlLoader.Factory(client);
-        registry.replace(GlideUrl.class, InputStream.class, factory);
-    }
-
-    private static Interceptor createInterceptor(final ResponseProgressListener listener) {
-        return new Interceptor() {
-            @Override
-            public Response intercept(Chain chain) throws IOException {
-                Request request = chain.request();
-                Response response = chain.proceed(request);
-                final String key = request.url().toString();
-                return response
-                        .newBuilder()
-                        .body(new OkHttpProgressResponseBody(key, response.body(), listener))
-                        .build();
-            }
-        };
-    }
-
-    static void forget(String key) {
-        progressListener.forget(key);
-    }
-
-    static void expect(String key, FastImageProgressListener listener) {
-        progressListener.expect(key, listener);
-    }
-
-    private interface ResponseProgressListener {
-        void update(String key, long bytesRead, long contentLength);
-    }
-
-    private static class DispatchingProgressListener implements ResponseProgressListener {
-        private final Map<String, FastImageProgressListener> LISTENERS = new WeakHashMap<>();
-        private final Map<String, Long> PROGRESSES = new HashMap<>();
-
-        void forget(String key) {
-            LISTENERS.remove(key);
-            PROGRESSES.remove(key);
-        }
-
-        void expect(String key, FastImageProgressListener listener) {
-            LISTENERS.put(key, listener);
-        }
-
-        @Override
-        public void update(final String key, final long bytesRead, final long contentLength) {
-            final FastImageProgressListener listener = LISTENERS.get(key);
-            if (listener == null) {
-                return;
-            }
-            if (contentLength <= bytesRead) {
-                forget(key);
-            }
-            if (needsDispatch(key, bytesRead, contentLength, listener.getGranularityPercentage())) {
-                listener.onProgress(key, bytesRead, contentLength);
-            }
-        }
-
-        private boolean needsDispatch(String key, long current, long total, float granularity) {
-            if (granularity == 0 || current == 0 || total == current) {
-                return true;
-            }
-            float percent = 100f * current / total;
-            long currentProgress = (long) (percent / granularity);
-            Long lastProgress = PROGRESSES.get(key);
-            if (lastProgress == null || currentProgress != lastProgress) {
-                PROGRESSES.put(key, currentProgress);
-                return true;
-            } else {
-                return false;
-            }
-        }
-    }
-
-    private static class OkHttpProgressResponseBody extends ResponseBody {
-        private final String key;
-        private final ResponseBody responseBody;
-        private final ResponseProgressListener progressListener;
-        private BufferedSource bufferedSource;
-
-        OkHttpProgressResponseBody(
-                String key,
-                ResponseBody responseBody,
-                ResponseProgressListener progressListener
-        ) {
-            this.key = key;
-            this.responseBody = responseBody;
-            this.progressListener = progressListener;
-        }
-
-        @Override
-        public MediaType contentType() {
-            return responseBody.contentType();
-        }
-
-        @Override
-        public long contentLength() {
-            return responseBody.contentLength();
-        }
-
-        @Override
-        public BufferedSource source() {
-            if (bufferedSource == null) {
-                bufferedSource = Okio.buffer(source(responseBody.source()));
-            }
-            return bufferedSource;
-        }
-
-        private Source source(Source source) {
-            return new ForwardingSource(source) {
-                long totalBytesRead = 0L;
-
-                @Override
-                public long read(Buffer sink, long byteCount) throws IOException {
-                    long bytesRead = super.read(sink, byteCount);
-                    long fullLength = responseBody.contentLength();
-                    if (bytesRead == -1) {
-                        // this source is exhausted
-                        totalBytesRead = fullLength;
-                    } else {
-                        totalBytesRead += bytesRead;
-                    }
-                    progressListener.update(key, totalBytesRead, fullLength);
-                    return bytesRead;
-                }
-            };
-        }
-    }
-}
diff --git a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageRequestListener.java b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageRequestListener.java
index 361417b..9e13d52 100644
--- a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageRequestListener.java
+++ b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageRequestListener.java
@@ -32,7 +32,7 @@ public class FastImageRequestListener implements RequestListener<Drawable> {
 
     @Override
     public boolean onLoadFailed(@androidx.annotation.Nullable GlideException e, Object model, Target<Drawable> target, boolean isFirstResource) {
-        FastImageOkHttpProgressGlideModule.forget(key);
+        // FastImageOkHttpProgressGlideModule.forget(key);
         if (!(target instanceof ImageViewTarget)) {
             return false;
         }
diff --git a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewManager.java b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewManager.java
index 0944463..6555b0f 100644
--- a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewManager.java
+++ b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewManager.java
@@ -4,12 +4,17 @@ import android.app.Activity;
 import android.content.Context;
 import android.content.ContextWrapper;
 import android.graphics.PorterDuff;
+import android.graphics.drawable.Animatable;
+import android.graphics.drawable.Drawable;
 import android.os.Build;
 
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.load.model.GlideUrl;
+import com.bumptech.glide.load.resource.gif.GifDrawable;
 import com.bumptech.glide.request.Request;
+import com.bumptech.glide.request.target.DrawableImageViewTarget;
+import com.bumptech.glide.request.transition.Transition;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.bridge.WritableNativeMap;
@@ -31,12 +36,15 @@ import static com.dylanvann.fastimage.FastImageRequestListener.REACT_ON_ERROR_EV
 import static com.dylanvann.fastimage.FastImageRequestListener.REACT_ON_LOAD_END_EVENT;
 import static com.dylanvann.fastimage.FastImageRequestListener.REACT_ON_LOAD_EVENT;
 
+import androidx.annotation.NonNull;
+
 class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> implements FastImageProgressListener {
 
     private static final String REACT_CLASS = "FastImageView";
     private static final String REACT_ON_LOAD_START_EVENT = "onFastImageLoadStart";
     private static final String REACT_ON_PROGRESS_EVENT = "onFastImageProgress";
     private static final Map<String, List<FastImageViewWithUrl>> VIEWS_FOR_URLS = new WeakHashMap<>();
+    private boolean animate = false;
 
     @Nullable
     private RequestManager requestManager = null;
@@ -61,9 +69,9 @@ class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> imple
             // Cancel existing requests.
             clearView(view);
 
-            if (view.glideUrl != null) {
-                FastImageOkHttpProgressGlideModule.forget(view.glideUrl.toStringUrl());
-            }
+            // if (view.glideUrl != null) {
+            //     FastImageOkHttpProgressGlideModule.forget(view.glideUrl.toStringUrl());
+            // }
             // Clear the image.
             view.setImageDrawable(null);
             return;
@@ -84,9 +92,9 @@ class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> imple
                 requestManager.clear(view);
             }
 
-            if (view.glideUrl != null) {
-                FastImageOkHttpProgressGlideModule.forget(view.glideUrl.toStringUrl());
-            }
+            // if (view.glideUrl != null) {
+            //     FastImageOkHttpProgressGlideModule.forget(view.glideUrl.toStringUrl());
+            // }
             // Clear the image.
             view.setImageDrawable(null);
             return;
@@ -99,7 +107,7 @@ class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> imple
         clearView(view);
 
         String key = glideUrl.toStringUrl();
-        FastImageOkHttpProgressGlideModule.expect(key, this);
+        // FastImageOkHttpProgressGlideModule.expect(key, this);
         List<FastImageViewWithUrl> viewsForKey = VIEWS_FOR_URLS.get(key);
         if (viewsForKey != null && !viewsForKey.contains(view)) {
             viewsForKey.add(view);
@@ -113,6 +121,7 @@ class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> imple
         int viewId = view.getId();
         eventEmitter.receiveEvent(viewId, REACT_ON_LOAD_START_EVENT, new WritableNativeMap());
 
+        final FastImageViewManager self = this;
         if (requestManager != null) {
             requestManager
                     // This will make this work for remote and local images. e.g.
@@ -124,7 +133,21 @@ class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> imple
                     .load(imageSource.getSourceForLoad())
                     .apply(FastImageViewConverter.getOptions(context, imageSource, source))
                     .listener(new FastImageRequestListener(key))
-                    .into(view);
+//                    .into(view);
+                    .into(new DrawableImageViewTarget(view) {
+                        @Override
+                        public void onResourceReady(Drawable resource, Transition<? super Drawable> transition) {
+                            if (resource instanceof GifDrawable) {
+                                GifDrawable gifDrawable = (GifDrawable) resource;
+                                if (self.animate == false) {
+                                    gifDrawable.stop();
+                                } else {
+                                    gifDrawable.start();
+                                }
+                            }
+                            view.setImageDrawable(resource);
+                        }
+                    });
         }
     }
 
@@ -137,6 +160,24 @@ class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> imple
         }
     }
 
+    @ReactProp(name = "animate")
+    public void setAnimate(FastImageViewWithUrl view, Boolean animate) {
+        if (animate == true) {
+            this.animate = true;
+            Drawable drawable = view.getDrawable();
+            if (drawable instanceof GifDrawable) {
+                ((GifDrawable) drawable).start();
+            }
+        } else if (animate == false) {
+            this.animate = false;
+            Drawable drawable = view.getDrawable();
+            if (drawable instanceof GifDrawable) {
+                ((GifDrawable) drawable).stop();
+            }
+        }
+    }
+
+
     @ReactProp(name = "resizeMode")
     public void setResizeMode(FastImageViewWithUrl view, String resizeMode) {
         final FastImageViewWithUrl.ScaleType scaleType = FastImageViewConverter.getScaleType(resizeMode);
@@ -150,7 +191,7 @@ class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> imple
 
         if (view.glideUrl != null) {
             final String key = view.glideUrl.toString();
-            FastImageOkHttpProgressGlideModule.forget(key);
+            // FastImageOkHttpProgressGlideModule.forget(key);
             List<FastImageViewWithUrl> viewsForKey = VIEWS_FOR_URLS.get(key);
             if (viewsForKey != null) {
                 viewsForKey.remove(view);
diff --git a/node_modules/react-native-fast-image/dist/index.cjs.js b/node_modules/react-native-fast-image/dist/index.cjs.js
index 2a49562..c18fccf 100644
--- a/node_modules/react-native-fast-image/dist/index.cjs.js
+++ b/node_modules/react-native-fast-image/dist/index.cjs.js
@@ -44,6 +44,7 @@ function FastImageBase({
   // eslint-disable-next-line no-shadow
   resizeMode = 'cover',
   forwardedRef,
+  animate,
   ...props
 }) {
   if (fallback) {
@@ -79,7 +80,8 @@ function FastImageBase({
     onFastImageLoad: onLoad,
     onFastImageError: onError,
     onFastImageLoadEnd: onLoadEnd,
-    resizeMode: resizeMode
+    resizeMode: resizeMode,
+    animate: animate,
   })), children);
 }
 
diff --git a/node_modules/react-native-fast-image/dist/index.js b/node_modules/react-native-fast-image/dist/index.js
index 1fc0e9d..4ed24a6 100644
--- a/node_modules/react-native-fast-image/dist/index.js
+++ b/node_modules/react-native-fast-image/dist/index.js
@@ -37,6 +37,7 @@ function FastImageBase({
   // eslint-disable-next-line no-shadow
   resizeMode = 'cover',
   forwardedRef,
+  animate,
   ...props
 }) {
   if (fallback) {
@@ -72,7 +73,8 @@ function FastImageBase({
     onFastImageLoad: onLoad,
     onFastImageError: onError,
     onFastImageLoadEnd: onLoadEnd,
-    resizeMode: resizeMode
+    resizeMode: resizeMode,
+    animate: animate,
   })), children);
 }
 
diff --git a/node_modules/react-native-fast-image/ios/FastImage/FFFastImageView.h b/node_modules/react-native-fast-image/ios/FastImage/FFFastImageView.h
index fb557cf..1453374 100644
--- a/node_modules/react-native-fast-image/ios/FastImage/FFFastImageView.h
+++ b/node_modules/react-native-fast-image/ios/FastImage/FFFastImageView.h
@@ -19,5 +19,6 @@
 @property (nonatomic, strong) FFFastImageSource *source;
 @property (nonatomic, strong) UIColor *imageColor;
 
+- (void) setAnimateImage: (BOOL) animate;
 @end
 
diff --git a/node_modules/react-native-fast-image/ios/FastImage/FFFastImageView.m b/node_modules/react-native-fast-image/ios/FastImage/FFFastImageView.m
index 9c0f1d3..75afcd2 100644
--- a/node_modules/react-native-fast-image/ios/FastImage/FFFastImageView.m
+++ b/node_modules/react-native-fast-image/ios/FastImage/FFFastImageView.m
@@ -19,10 +19,21 @@
 - (id) init {
     self = [super init];
     self.resizeMode = RCTResizeModeCover;
+    self.autoPlayAnimatedImage = NO;
     self.clipsToBounds = YES;
     return self;
 }
 
+
+- (void) setAnimateImage: (BOOL) animate {
+    if (animate) {
+        [self startAnimating];
+    } else {
+        [self stopAnimating];
+    }
+}
+
+
 - (void)setResizeMode:(RCTResizeMode)resizeMode {
     if (_resizeMode != resizeMode) {
         _resizeMode = resizeMode;
@@ -30,6 +41,7 @@
     }
 }
 
+
 - (void)setOnFastImageLoadEnd:(RCTDirectEventBlock)onFastImageLoadEnd {
     _onFastImageLoadEnd = onFastImageLoadEnd;
     if (self.hasCompleted) {
diff --git a/node_modules/react-native-fast-image/ios/FastImage/FFFastImageViewManager.m b/node_modules/react-native-fast-image/ios/FastImage/FFFastImageViewManager.m
index a8059af..e242e2a 100644
--- a/node_modules/react-native-fast-image/ios/FastImage/FFFastImageViewManager.m
+++ b/node_modules/react-native-fast-image/ios/FastImage/FFFastImageViewManager.m
@@ -21,6 +21,16 @@ RCT_EXPORT_VIEW_PROPERTY(onFastImageLoad, RCTDirectEventBlock)
 RCT_EXPORT_VIEW_PROPERTY(onFastImageLoadEnd, RCTDirectEventBlock)
 RCT_REMAP_VIEW_PROPERTY(tintColor, imageColor, UIColor)
 
+RCT_CUSTOM_VIEW_PROPERTY(animate, BOOL, FFFastImageView)
+{
+    BOOL animate = [RCTConvert BOOL: json];
+    if (animate == true) {
+        [view setAnimateImage: true];
+    } else if (animate == false) {
+        [view setAnimateImage: false];
+    }
+};
+
 RCT_EXPORT_METHOD(preload:(nonnull NSArray<FFFastImageSource *> *)sources)
 {
     NSMutableArray *urls = [NSMutableArray arrayWithCapacity:sources.count];
